import Foundation
import StoreKit

/// Main SDK class for handling revenue sharing with StoreKit 2 integration
@available(iOS 15.0, macOS 12.0, *)
public class IncentivlySDK {
    
    public static let shared = IncentivlySDK()
    
    private let apiClient: APIClient
    private let storeKitManager: StoreKitManager
    private let userDefaults = UserDefaults.standard
    private let userIdentifierKey = "Incentivly_UserIdentifier"
    private let isRegisteredKey = "Incentivly_IsRegistered"
    private let devKeyKey = "Incentivly_DevKey"
    private static var isInitialized = false
    
    private init() {
        self.apiClient = APIClient()
        self.storeKitManager = StoreKitManager()
        storeKitManager.sdk = self
    }
    
    /// Initialize the SDK and start transaction monitoring
    /// Call this early in your app lifecycle (e.g., in AppDelegate/SceneDelegate) to ensure no transactions are missed
    /// This can be called before user registration to start monitoring transactions immediately
    /// - Parameter loggingEnabled: Whether to enable detailed logging
    public static func initialize(loggingEnabled: Bool = false) {
        // Prevent multiple initializations
        guard !isInitialized else {
            IncentivlyLogger.shared.logInfo("⚠️ Incentivly SDK already initialized, skipping")
            return
        }
        
        IncentivlyLogger.shared.setLoggingEnabled(loggingEnabled)
        // Accessing shared triggers initialization of the entire SDK including StoreKitManager
        let sdk = IncentivlySDK.shared
        isInitialized = true
        IncentivlyLogger.shared.logInfo("🚀 Incentivly SDK initialized")
        
        // Start transaction monitoring after logging is set up
        sdk.storeKitManager.startMonitoring()
        IncentivlyLogger.shared.logInfo("📡 Transaction monitoring initiated")
    }
    
    /// Enable or disable detailed logging for debugging
    /// - Parameter enabled: Whether logging should be enabled
    public func setLoggingEnabled(_ enabled: Bool) {
        IncentivlyLogger.shared.setLoggingEnabled(enabled)
    }
    
    /// Register a user with the revenue sharing API
    /// This method will only register once per device. Subsequent calls will return the stored user identifier.
    /// - Parameters:
    ///   - devKey: Developer key for authentication
    ///   - userIdentifier: Optional user identifier. If not provided, one will be generated by the server
    /// - Returns: User registration response
    @discardableResult
    public func registerUser(devKey: String, userIdentifier: String? = nil) async throws -> UserRegistrationResponse {
        // Check if user is already registered
        if isUserRegistered() {
            let storedUserIdentifier = getUserIdentifier()
            IncentivlyLogger.shared.logInfo("User already registered with identifier: \(storedUserIdentifier ?? "unknown")")
            
            return UserRegistrationResponse(
                success: true,
                userIdentifier: storedUserIdentifier,
                influencerId: nil,
                referralId: nil,
                message: "User already registered"
            )
        }
        
        do {
            let response = try await apiClient.registerUser(devKey: devKey, userIdentifier: userIdentifier)
            
            if response.success {
                // Store the user identifier (either provided or received from response)
                let identifierToStore = userIdentifier ?? response.userIdentifier
                storeUserIdentifier(identifierToStore)
                storeDevKey(devKey)
                markUserAsRegistered()
                
                IncentivlyLogger.shared.logSuccess("User registered successfully with identifier: \(identifierToStore ?? "unknown")")
            }
            
            return response
        } catch {
            IncentivlyLogger.shared.logError("Failed to register user", error: error)
            throw error
        }
    }
    
    /// Update user identifier both on the server and locally
    /// - Parameter newUserIdentifier: New user identifier
    /// - Returns: Update user identifier response
    @discardableResult
    public func updateUserIdentifier(newUserIdentifier: String) async throws -> UpdateUserIdentifierResponse {
        guard let currentUserIdentifier = getUserIdentifier() else {
            throw UserError.userNotRegistered
        }
        
        guard let devKey = getDevKey() else {
            throw UserError.devKeyNotFound
        }
        
        do {
            let response = try await apiClient.updateUserIdentifier(
                currentUserIdentifier: currentUserIdentifier,
                newUserIdentifier: newUserIdentifier,
                devKey: devKey
            )
            
            if response.success {
                // Update the stored user identifier locally
                storeUserIdentifier(newUserIdentifier)
                IncentivlyLogger.shared.logSuccess("User identifier updated successfully from '\(currentUserIdentifier)' to '\(newUserIdentifier)'")
                IncentivlyLogger.shared.logInfo("Updated \(response.registrationsUpdated ?? 0) registration(s) and \(response.paymentsUpdated ?? 0) payment(s)")
            }
            
            return response
        } catch {
            IncentivlyLogger.shared.logError("Failed to update user identifier", error: error)
            throw error
        }
    }
    
    /// Report a payment to the revenue sharing API
    /// - Parameters:
    ///   - productId: Product identifier
    ///   - iosTransactionId: iOS transaction ID
    /// - Returns: Payment report response
    @discardableResult
    public func reportPayment(productId: String, iosTransactionId: String) async throws -> PaymentReportResponse {
        guard let userIdentifier = getUserIdentifier() else {
            throw PaymentError.userNotRegistered
        }
        
        guard let devKey = getDevKey() else {
            throw PaymentError.devKeyNotFound
        }
        
        // Check if transaction was already processed to prevent duplicates
        guard let transactionId = UInt64(iosTransactionId) else {
            throw PaymentError.invalidTransactionId
        }
        
        if !Transactions.shouldProcessTransaction(with: transactionId) {
            throw PaymentError.transactionAlreadyProcessed
        }
        
        do {
            let response = try await apiClient.reportPayment(
                userIdentifier: userIdentifier,
                productId: productId,
                iosTransactionId: iosTransactionId,
                devKey: devKey
            )
            
            if response.success {
                // Save the transaction as processed to prevent future duplicates
                Transactions.saveProcessedTransaction(id: transactionId)
                print("Payment reported successfully with ID: \(response.paymentId ?? "unknown")")
            }
            
            return response
        } catch {
            // Add transaction report attempt for retry logic
            Transactions.addTransactionReportAttempt(for: transactionId)
            print("Failed to report payment: \(error)")
            throw error
        }
    }
    
    /// Get the stored user identifier
    /// - Returns: The stored user identifier or nil if not registered
    public func getUserIdentifier() -> String? {
        return userDefaults.string(forKey: userIdentifierKey)
    }
    
    /// Get the stored developer key
    /// - Returns: The stored developer key or nil if not registered
    internal func getDevKey() -> String? {
        return userDefaults.string(forKey: devKeyKey)
    }
    
    /// Check if the user is already registered
    /// - Returns: True if user is registered, false otherwise
    public func isUserRegistered() -> Bool {
        return userDefaults.bool(forKey: isRegisteredKey)
    }
    
    // MARK: - Private Methods
    
    private func storeUserIdentifier(_ identifier: String?) {
        userDefaults.set(identifier, forKey: userIdentifierKey)
    }
    
    private func storeDevKey(_ devKey: String) {
        userDefaults.set(devKey, forKey: devKeyKey)
    }
    
    private func markUserAsRegistered() {
        userDefaults.set(true, forKey: isRegisteredKey)
    }
}

/// Payment errors
public enum PaymentError: Error {
    case userNotRegistered
    case devKeyNotFound
    case invalidTransactionId
    case transactionAlreadyProcessed
}

/// User errors
public enum UserError: Error {
    case userNotRegistered
    case devKeyNotFound
}

extension PaymentError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case .userNotRegistered:
            return "User must be registered before reporting payments"
        case .devKeyNotFound:
            return "Developer key not found. Please register user first."
        case .invalidTransactionId:
            return "Invalid transaction ID provided."
        case .transactionAlreadyProcessed:
            return "This transaction has already been processed."
        }
    }
}

extension UserError: LocalizedError {
    public var errorDescription: String? {
        switch self {
        case .userNotRegistered:
            return "User must be registered before updating identifier"
        case .devKeyNotFound:
            return "Developer key not found. Please register user first."
        }
    }
}